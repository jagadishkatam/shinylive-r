[{"name":"app.R","content":"library(shiny)\r\nlibrary(cards)\r\nlibrary(gtsummary)\r\nlibrary(dplyr)\r\nlibrary(gt)\r\nlibrary(shinylive)\r\nlibrary(httpuv)\r\n\r\ncreate_summary <- function(data, group = NULL, cols = NULL, ...) {\r\n  \r\n  data <- data |> filter(...)\r\n  \r\n  if (nrow(data)==0){\r\n    stop(\"dataset is empty.\")\r\n  }\r\n  \r\n  # Check if cols is provided\r\n  if (is.null(cols)) {\r\n    stop(\"Please provide column names in the 'cols' argument.\")\r\n  }\r\n  \r\n  # Check if all specified columns exist in the data\r\n  missing_cols <- setdiff(cols, colnames(data))\r\n  if (length(missing_cols) > 0) {\r\n    stop(paste(\"The following columns do not exist in the data:\", paste(missing_cols, collapse = \", \")))\r\n  }\r\n  \r\n  # Separate columns into numeric and character\r\n  numeric_cols <- cols[sapply(data[cols], is.numeric)]\r\n  character_cols <- cols[sapply(data[cols], is.factor)|sapply(data[cols], is.character)]\r\n  \r\n  # Display categorized columns\r\n  message(\"Numeric columns: \", paste(numeric_cols, collapse = \", \"))\r\n  message(\"Character columns: \", paste(character_cols, collapse = \", \"))\r\n  \r\n  # Build the ARD with the needed summary statistics using {cards}\r\n  ard <-\r\n    ard_stack(\r\n      data,\r\n      ard_continuous(variables = all_of(numeric_cols)),\r\n      ard_categorical(variables = all_of(character_cols)),\r\n      .by = {{group}},\r\n      .attributes = TRUE\r\n    )\r\n  \r\n  # Define dynamic types and statistics for the columns\r\n  type_list <- lapply(numeric_cols, function(col) {\r\n    if (is.numeric(data[[col]])) {\r\n      as.formula(paste0(col, \" ~ 'continuous2'\"))\r\n    }\r\n  })\r\n  \r\n  statistic_list <- lapply(numeric_cols, function(col) {\r\n    if (is.numeric(data[[col]])) {\r\n      as.formula(paste0(col, \" ~ c('{N}', '{mean} ({sd})', '{median} ({p25}, {p75})', '{min}, {max}')\"))\r\n    }\r\n  })\r\n  \r\n  # Use the ARD to create a demographics table using {gtsummary}\r\n  \r\n  if (length(numeric_cols)==0){\r\n    tbl_ard_summary(\r\n      cards = ard,\r\n      by = all_of(group),\r\n      include = all_of(cols),\r\n      # type = as.formula(paste(numeric_cols[1], \"~ 'continuous2'\")),\r\n      # statistic = as.formula(paste(numeric_cols[1], \"~ c('{N}', '{mean} ({sd})', '{median} ({p25}, {p75})', '{min}, {max}')\"))\r\n    ) |> \r\n      bold_labels() |> \r\n      modify_header(all_stat_cols() ~ \"**{level}**  \\nN = {n}\") |> \r\n      modify_footnote(everything() ~ NA)  |>  \r\n      modify_caption(\"**Summary of Demography**\") |> \r\n      as_gt()\r\n  } else {\r\n    tbl_ard_summary(\r\n      cards = ard,\r\n      by = all_of(group),\r\n      include = all_of(cols),\r\n      type = type_list,\r\n      statistic = statistic_list\r\n    ) |> \r\n      bold_labels() |> \r\n      modify_header(all_stat_cols() ~ \"**{level}**  \\nN = {n}\") |> \r\n      modify_footnote(everything() ~ NA)  |>\r\n      modify_caption(\"**Summary of Demography**\") |> \r\n      as_gt()\r\n  }\r\n  \r\n}\r\n# debugonce(create_summary)\r\n\r\nui <- fluidPage(\r\n  tags$head(\r\n    tags$style(HTML(\"\\n      .navbar-default { background-color: #2c3e50; border-color: #2c3e50; } \\n      .navbar-default .navbar-brand { color: #ecf0f1; } \\n      .sidebar { background-color: #ecf0f1; padding: 15px; border-right: 2px solid #bdc3c7; } \\n      .mainpanel { background-color: #ffffff; padding: 20px; border-left: 2px solid #bdc3c7; } \\n      .shiny-download-link { background-color: #3498db; color: white; padding: 10px 15px; border: none; border-radius: 4px; } \\n    \"))\r\n  ),\r\n  titlePanel(\"Demographic Summary\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      class = \"sidebar\",\r\n      fileInput(\"file\", \"Upload File\", accept = c(\".csv\", \".Rdata\", \".rds\")),\r\n      selectInput(\"group_col\", \"Select Grouping Column(s)\", choices = NULL, multiple = TRUE),\r\n      selectInput(\"summary_col\", \"Select Summary Column(s)\", choices = NULL, multiple = TRUE),\r\n      textInput(\"filter_val\", \"Enter Filter Expression (e.g., Age > 30 & Gender == 'M')\")\r\n    ),\r\n    mainPanel(\r\n      class = \"mainpanel\",\r\n      gt_output(\"summary_table\"),\r\n      downloadButton(\"download_data\", \"Download Data\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  data <- reactive({\r\n    req(input$file)\r\n    ext <- tools::file_ext(input$file$name)\r\n    if (ext == \"csv\") {\r\n      read.csv(input$file$datapath)\r\n    } else if (ext == \"Rdata\") {\r\n      load(input$file$datapath)\r\n      get(ls()[1])\r\n    } else if (ext == \"rds\") {\r\n      readRDS(input$file$datapath)\r\n    } else {\r\n      stop(\"Unsupported file type\")\r\n    }\r\n  })\r\n  observe({\r\n    req(data())\r\n    cols <- colnames(data())\r\n    updateSelectInput(session, \"group_col\", choices = cols)\r\n    updateSelectInput(session, \"summary_col\", choices = cols)\r\n  })\r\n  filtered_data <- reactive({\r\n    req(data(), input$filter_val)\r\n    d <- data()\r\n    d <- d |> filter(eval(parse(text = input$filter_val)))\r\n    d\r\n  })\r\n  summary_table <- reactive({\r\n    req(filtered_data(), input$group_col, input$summary_col)\r\n    create_summary(data = filtered_data(), group = input$group_col, cols = input$summary_col)\r\n  })\r\n  output$summary_table <- render_gt({\r\n    summary_table()\r\n  })\r\n  output$download_data <- downloadHandler(\r\n    filename = function() { \"summary_data.csv\" },\r\n    content = function(file) {\r\n      write.csv(summary_table(), file, row.names = FALSE)\r\n    }\r\n  )\r\n}\r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\n","type":"text"}]
